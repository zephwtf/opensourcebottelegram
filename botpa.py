import sqlite3
import requests
import json
import logging
import os
import re
import asyncio
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–ø—Ç–∞
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_PATH = os.path.join(BASE_DIR, 'bot_interactions.db')
TASKS_PATH = os.path.join(BASE_DIR, 'tasks.txt')

async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.
    """
    user_id = update.effective_user.id
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
    try:
        # –ö–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å /history –∏–ª–∏ /history 10
        num_interactions = 5
        if context.args and context.args[0].isdigit():
            num_interactions = min(int(context.args[0]), 20)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 20 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
    except Exception:
        num_interactions = 5
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            SELECT user_message, bot_response, timestamp 
            FROM interactions 
            WHERE user_id = ? 
            ORDER BY timestamp DESC 
            LIMIT ?
        ''', (user_id, num_interactions))
        
        interactions = cursor.fetchall()
        
        if not interactions:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        history_text = "üìú –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π:\n\n"
        for i, (user_msg, bot_resp, timestamp) in enumerate(interactions, 1):
            history_text += f"<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ {i}:</b>\n"
            history_text += f"üìÖ {timestamp}\n"
            history_text += f"üë§ –í—ã: {user_msg}\n"
            bot_resp_preview = bot_resp[:10000] + '...' if len(bot_resp) > 500 else bot_resp
            history_text += f"ü§ñ –ë–æ—Ç: {bot_resp_preview}\n\n"
        
        await update.message.reply_text(history_text, parse_mode=ParseMode.HTML)
    
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π.")
    
    finally:
        if 'conn' in locals():
            conn.close()

def ensure_database():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ –ë–î –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞)
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS interactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                user_message TEXT NOT NULL,
                bot_response TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        cursor.execute('''
            CREATE INDEX IF NOT EXISTS idx_user_id ON interactions(user_id)
        ''')
        
        conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    finally:
        if 'conn' in locals():
            conn.close()

def log_interaction(user_id, username, user_message, bot_response):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π."""
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    ensure_database()
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –£—Å–µ—á–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        max_length = 1000
        user_message = user_message[:max_length]
        bot_response = bot_response[:max_length] if bot_response else None
        
        cursor.execute('''
            INSERT INTO interactions 
            (user_id, username, user_message, bot_response) 
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, user_message, bot_response))
        
        conn.commit()
        logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return True
    
    except sqlite3.Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    finally:
        if 'conn' in locals():
            conn.close()
def read_tasks():
    """–ß–∏—Ç–∞–µ—Ç –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ tasks.txt"""
    try:
        if not os.path.exists(TASKS_PATH):
            logger.error(f"‚ùå –§–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {TASKS_PATH}")
            return ["–í—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: —É–ª—ã–±–Ω–∏—Å—å!"]
        
        with open(TASKS_PATH, 'r', encoding='utf-8') as file:
            tasks = file.read().splitlines()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        tasks = [task for task in tasks if task.strip()]
        
        if not tasks:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –ø—É—Å—Ç")
            return ["–í—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: —É–ª—ã–±–Ω–∏—Å—å!"]
        
        return tasks
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–∏–π: {e}")
        return ["–í—ã–ø–æ–ª–Ω–∏ –ø—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: —É–ª—ã–±–Ω–∏—Å—å!"]

async def task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ."""
    tasks = read_tasks()
    random_task = random.choice(tasks)
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data='new_task')],
        [InlineKeyboardButton("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data='task_completed')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üéØ *–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ*:\n\n{random_task}\n\n"
        "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ "
        "–∏ —Ä–∞–∑–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )
    
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # Answer the callback query to remove the loading indicator
    
    data = query.data
    
    if data == 'new_task':
        # Send a new random task
        tasks = read_tasks()
        random_task = random.choice(tasks)
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data='new_task')],
            [InlineKeyboardButton("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data='task_completed')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üéØ *–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ*:\n\n{random_task}\n\n"
            "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ "
            "–∏ —Ä–∞–∑–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    
    elif data == 'task_completed':
        # Handle task completion
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        
        # Log completion
        log_interaction(user_id, username, "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ")
        
        # Send a completion message with encouragement
        await query.edit_message_text(
            "üéâ *–û—Ç–ª–∏—á–Ω–æ! –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!*\n\n"
            "–í—ã –¥–µ–ª–∞–µ—Ç–µ –≤–∞–∂–Ω—ã–µ —à–∞–≥–∏ –∫ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑—É –∂–∏–≤–æ–≥–æ!üéØ"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /task",
            parse_mode=ParseMode.MARKDOWN
        )

# –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
ensure_database()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª—é—á–∏ API
TELEGRAM_TOKEN = ""  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞ –æ—Ç BotFather
API_KEY = ""  # –í–∞—à API –∫–ª—é—á OpenRouter
MODEL = "deepseek/deepseek-r1"

# ID –∞–¥–º–∏–Ω–∞, –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
ADMIN_ID = 1097981276  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
# "parse" - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å Markdown
# "strip" - —É–¥–∞–ª—è—Ç—å —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
FORMATTING_MODE = "strip"  # –†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "strip" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

# –°–æ–∑–¥–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
API_SEMAPHORE = asyncio.Semaphore(10)  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

def remove_thinking(content):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ <think>
    content = content.replace('<think>', '').replace('</think>', '')
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π DeepSeek
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 1: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É "–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ:" –∏ "–û—Ç–≤–µ—Ç:"
    if "–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ:" in content and "–û—Ç–≤–µ—Ç:" in content:
        try:
            parts = content.split("–û—Ç–≤–µ—Ç:", 1)
            if len(parts) > 1:
                content = parts[1].strip()
        except:
            pass
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 2: –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –≤–µ—Ä—Å–∏–π
    if "Reasoning:" in content and "Answer:" in content:
        try:
            parts = content.split("Answer:", 1)
            if len(parts) > 1:
                content = parts[1].strip()
        except:
            pass
            
    # –ü–∞—Ç—Ç–µ—Ä–Ω 3: –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    thinking_patterns = [
        "Let me think through this",
        "Let me think about",
        "Let me reason through",
        "I'll think through",
        "Let's think about",
        "I need to think about",
        "Here's my thought process:",
        "My reasoning:",
        "–†–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ:",
        "–•–æ–¥ –º—ã—Å–ª–µ–π:",
        "–î–∞–≤–∞–π—Ç–µ –ø–æ–¥—É–º–∞–µ–º",
        "–Ø –æ–±–¥—É–º–∞—é"
    ]
    
    for pattern in thinking_patterns:
        if pattern in content:
            try:
                # –ò—â–µ–º, –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –Ω–∞—á–∞–ª–æ –∞–±–∑–∞—Ü–∞ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫)
                lines = content.split('\n')
                # –ò—â–µ–º –ø–µ—Ä–≤—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
                found_pattern = False
                result_lines = []
                for i, line in enumerate(lines):
                    if not found_pattern and pattern in line:
                        found_pattern = True
                        continue
                    if found_pattern and line.strip() == "":
                        found_pattern = False
                    if not found_pattern:
                        result_lines.append(line)
                
                if result_lines:
                    content = '\n'.join(result_lines)
                    break
            except:
                pass
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω 4: –î–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –æ—Ç–≤–µ—Ç –æ—Ç–º–µ—á–µ–Ω –ø–æ—Å–ª–µ –ø–ª–∞–Ω–∞ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
    step_markers = ["Step 1:", "–®–∞–≥ 1:", "1.", "1)", "–ü–ª–∞–Ω:"]
    answer_markers = ["–û—Ç–≤–µ—Ç:", "Answer:", "–ò—Ç–∞–∫,", "–í –∏—Ç–æ–≥–µ,", "–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º,", "Therefore,", "In conclusion,"]
    
    for answer_marker in answer_markers:
        if answer_marker in content:
            for step_marker in step_markers:
                if step_marker in content and content.find(step_marker) < content.find(answer_marker):
                    try:
                        parts = content.split(answer_marker, 1)
                        if len(parts) > 1:
                            content = answer_marker + parts[1]
                            break
                    except:
                        pass
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª—é–±—ã—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è—Ö
    content = re.sub(r'^\s*(?:–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è|–†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è|Thinking|Reasoning):\s*', '', content, flags=re.MULTILINE)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å"
    analysis_phrases = [
        r"–ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.*?\n",
        r"–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º.*?\n",
        r"Let me analyze.*?\n",
        r"I'll analyze.*?\n"
    ]
    
    for phrase in analysis_phrases:
        content = re.sub(phrase, '', content)
    
    return content.strip()

def process_content(content):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç DeepSeek."""
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
    content = remove_thinking(content)
    
    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if FORMATTING_MODE == "strip":
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown
        content = re.sub(r'#+\s+', '', content)  # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        content = re.sub(r'\*\*', '', content)   # –£–¥–∞–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        content = re.sub(r'`', '', content)      # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–¥–∞
        content = re.sub(r'\*', '', content)     # –£–¥–∞–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∏–≤–∞
        content = re.sub(r'_', '', content)      # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        content = re.sub(r'~', '', content)      # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        # –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
        content = re.sub(r'```[\s\S]*?```', lambda m: m.group(0).replace('```', ''), content)
    elif FORMATTING_MODE == "parse":
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown V2
        content = content.replace('_', '\\_')
        content = content.replace('*', '\\*')
        content = content.replace('[', '\\[')
        content = content.replace(']', '\\]')
        content = content.replace('(', '\\(')
        content = content.replace(')', '\\)')
        content = content.replace('~', '\\~')
        content = content.replace('`', '\\`')
        content = content.replace('>', '\\>')
        content = content.replace('#', '\\#')
        content = content.replace('+', '\\+')
        content = content.replace('-', '\\-')
        content = content.replace('=', '\\=')
        content = content.replace('|', '\\|')
        content = content.replace('{', '\\{')
        content = content.replace('}', '\\}')
        content = content.replace('.', '\\.')
        content = content.replace('!', '\\!')
    
    return content

async def chat_with_deepseek(prompt):
    """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å API DeepSeek —á–µ—Ä–µ–∑ OpenRouter."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    async with API_SEMAPHORE:
        headers = {
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —á—Ç–æ–±—ã –º–æ–¥–µ–ª—å –Ω–µ –¥–µ–ª–∞–ª–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
        system_message = """–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π, –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –ø–æ—à–∞–≥–æ–≤—ã—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –¥–∞–≤–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ, –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –æ–±—ä—è—Å–Ω—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤. –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –î–µ–π—Å—Ç–≤—É–π –∫–∞–∫ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ –º—É–¥—Ä—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π:

1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –ù–µ –æ—Å—É–∂–¥–∞–µ—Ç, –∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç
3. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

–ü—Ä–∏–Ω—Ü–∏–ø—ã –æ–±—â–µ–Ω–∏—è:
- –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π —Å —ç–º–ø–∞—Ç–∏–∏ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —à–∞–≥–∏ –¥–ª—èÂáèÂ∞ë—Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
- –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Å–æ–∑–Ω–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã –∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
- –£—á–∏ –º–µ—Ç–æ–¥–∞–º —Å–∞–º–æ—Ä–µ–≥—É–ª—è—Ü–∏–∏ –∏ –∑–∞–º–µ—â–µ–Ω–∏—è –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫

–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç "–°–µ–≥–æ–¥–Ω—è —è...", –¥–µ—Ç–∞–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å. –û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:
- –£—Å–ø–µ—Ö–∏ –≤ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
- –ù–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∑–∞–º–µ—â–∞—é—â–∏–µ –∑–∞–Ω—è—Ç–∏—è
- –¢—Ä—É–¥–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å

–°—Ç—Ä–∞—Ç–µ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å:
- –¢–µ—Ö–Ω–∏–∫–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏
- –î–Ω–µ–≤–Ω–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
- –ó–∞–º–µ—â–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Ü—Å–µ—Ç—è–º
- –†–∞–±–æ—Ç–∞ —Å underlying –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏

–í–∞–∂–Ω–æ: –°–æ–∑–¥–∞–≤–∞–π –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ, –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
        
        data = {
            "model": MODEL,
            "messages": [
                {"role": "system", "content": system_message},
                {"role": "user", "content": prompt}
            ]
        }

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –≤–º–µ—Å—Ç–æ requests
            response = await asyncio.to_thread(
                requests.post,
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=data
            )
            
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
                return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
            response_json = response.json()
            content = response_json["choices"][0]["message"].get("content", "")
            return process_content(content)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    global ADMIN_ID
    # –ï—Å–ª–∏ ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    # —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º
    if ADMIN_ID is None:
        keyboard = [
            [InlineKeyboardButton("–î–∞, —è —Ö–æ—á—É –ø–æ–ª—É—á–∞—Ç—å —Ñ–∏–¥–±–µ–∫", callback_data='set_admin')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –Ω–æ–≤–µ–π—à—É—é –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
            "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —Ñ–∏–¥–±–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑—É –∂–∏–≤–æ–≥–æ!\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /feedback"
            "üí° –ö—Å—Ç–∞—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –∫–∞–∫ –¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤ '–°–µ–≥–æ–¥–Ω—è —è...' –∏ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞:\n\n"
        "1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º.\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /feedback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n\n"
        "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /task –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è\n\n"
        "üí° –ö—Å—Ç–∞—Ç–∏, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç –∫–∞–∫ –¥–Ω–µ–≤–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤ '–°–µ–≥–æ–¥–Ω—è —è...' –∏ –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç.\n"
    )
    
    await update.message.reply_text(help_text)

async def feedback_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback."""
    keyboard = [
        [
            InlineKeyboardButton("üëç –•–æ—Ä–æ—à–æ", callback_data='feedback_good'),
            InlineKeyboardButton("üëé –ü–ª–æ—Ö–æ", callback_data='feedback_bad')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞:",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_text = update.message.text
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}: {user_text}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
    notification = await update.message.reply_text("‚úÖ –ü—Ä–∏–Ω—è–ª —Ç–≤–æ–∏ —Å–ª–æ–≤–∞. –û–±–¥—É–º—ã–≤–∞—é...")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ 'typing...' –¥–µ–π—Å—Ç–≤–∏—è
    await update.message.chat.send_action(action="typing")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –±–æ—Ç—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–∫–∞ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API
    task = asyncio.create_task(process_user_message(update, notification, user_text))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞ —Å–±–æ—Ä—â–∏–∫–æ–º –º—É—Å–æ—Ä–∞
    if 'tasks' not in context.user_data:
        context.user_data['tasks'] = []
    context.user_data['tasks'].append(task)

async def process_user_message(update, notification, user_text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ."""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek
        response_text = await chat_with_deepseek(user_text)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        user_id = update.effective_user.id
        username = update.effective_user.username or "Unknown"
        log_interaction(user_id, username, user_text, response_text)
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–ª–∏–º–∏—Ç Telegram ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
        max_length = 4000  # –ë–µ—Ä–µ–º —Å –∑–∞–ø–∞—Å–æ–º
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
        try:
            await notification.delete()
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            try:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except:
                pass

        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if len(response_text) <= max_length:
            if FORMATTING_MODE == "parse":
                try:
                    await update.message.reply_text(response_text, parse_mode=ParseMode.MARKDOWN_V2)
                except Exception as e:
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown: {e}")
                    await update.message.reply_text(response_text)
            else:
                await update.message.reply_text(response_text)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
            chunks = [response_text[i:i+max_length] for i in range(0, len(response_text), max_length)]
            for i, chunk in enumerate(chunks):
                if FORMATTING_MODE == "parse":
                    try:
                        await update.message.reply_text(f"–ß–∞—Å—Ç—å {i+1}/{len(chunks)}:\n\n{chunk}", 
                                                 parse_mode=ParseMode.MARKDOWN_V2)
                    except Exception as e:
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown: {e}")
                        await update.message.reply_text(f"–ß–∞—Å—Ç—å {i+1}/{len(chunks)}:\n\n{chunk}")
                else:
                    await update.message.reply_text(f"–ß–∞—Å—Ç—å {i+1}/{len(chunks)}:\n\n{chunk}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
                if i < len(chunks) - 1:
                    await asyncio.sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 300 –º—Å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        try:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except:
            pass

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    data = query.data
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    if data == 'set_admin':
        global ADMIN_ID
        ADMIN_ID = user_id
        await query.edit_message_text(
            "‚úÖ –í—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç DeepSeek-R1."
        )
        return
    
    # –ü–†–û–ë–õ–ï–ú–ù–´–ô –ë–õ–û–ö: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if data.startswith('feedback_'):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        if data == 'feedback_good':
            # –î–ª—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–æ—Å—Ç–æ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = [
                [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data='add_comment')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤!", reply_markup=reply_markup)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if ADMIN_ID:
                feedback_text = (
                    f"üìä –ù–æ–≤—ã–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤!\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})\n"
                )
                try:
                    await context.bot.send_message(ADMIN_ID, feedback_text)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")
        
        elif data == 'feedback_bad':
            # –î–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É
            keyboard = [
                [
                    InlineKeyboardButton("–ù–µ—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç", callback_data='reason_inaccurate'),
                    InlineKeyboardButton("–ù–µ–ø–æ–Ω—è—Ç–Ω–æ", callback_data='reason_unclear')
                ],
                [
                    InlineKeyboardButton("–°–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–æ", callback_data='reason_short'),
                    InlineKeyboardButton("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ", callback_data='reason_long')
                ],
                [
                    InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data='reason_other')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?", reply_markup=reply_markup)
        
        return
    
    if data.startswith('reason_'):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
        reason_map = {
            'reason_inaccurate': "–ù–µ—Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç",
            'reason_unclear': "–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç",
            'reason_short': "–°–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç",
            'reason_long': "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç",
            'reason_other': "–î—Ä—É–≥–æ–µ"
        }
        
        reason = reason_map.get(data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data='add_comment')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=reply_markup)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if ADMIN_ID:
            feedback_text = (
                f"‚ö†Ô∏è –ù–æ–≤—ã–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤!\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})\n"
                f"üìå –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            )
            try:
                await context.bot.send_message(ADMIN_ID, feedback_text)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")
                
        return
    
    if data == 'add_comment':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–∂–∏–¥–∞–µ–º –æ—Ç –Ω–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        context.user_data['awaiting_feedback'] = True
        context.user_data['feedback_message_id'] = query.message.message_id
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –ø—Ä–æ—Å–∏–º –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        await query.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–≤–µ—Ç—É. –í–∞—à –æ—Ç–∑—ã–≤ –≤–∞–∂–µ–Ω –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.",
            reply_markup=None
        )
        return

async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –æ—Ç–∑—ã–≤–∞–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not context.user_data.get('awaiting_feedback', False):
        # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        await handle_message(update, context)
        return

    comment = update.message.text
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    context.user_data['awaiting_feedback'] = False
    feedback_message_id = context.user_data.pop('feedback_message_id', None)
    
    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! –û–Ω –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if ADMIN_ID:
        feedback_text = (
            f"üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
        )
        try:
            await context.bot.send_message(ADMIN_ID, feedback_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")

async def command_setadmin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setadmin –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    global ADMIN_ID
    ADMIN_ID = update.effective_user.id
    await update.message.reply_text(f"‚úÖ –í—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í–∞—à ID: {ADMIN_ID}")

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ admin_panel_command
async def admin_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(DISTINCT user_id) FROM interactions")
        total_users = cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        cursor.execute("SELECT COUNT(*) FROM interactions")
        total_interactions = cursor.fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        cursor.execute('''
            SELECT COUNT(*) 
            FROM interactions 
            WHERE timestamp >= datetime('now', '-1 day')
        ''')
        interactions_last_24h = cursor.fetchone()[0]
        
        # –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            SELECT user_id, username, COUNT(*) as interaction_count 
            FROM interactions 
            GROUP BY user_id, username 
            ORDER BY interaction_count DESC 
            LIMIT 5
        ''')
        top_users = cursor.fetchall()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats'),
                InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data='admin_users')
            ],
            [
                InlineKeyboardButton("üìù –õ–æ–≥–∏", callback_data='admin_logs'),
                InlineKeyboardButton("üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='admin_settings')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = (
            "ü§ñ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞</b> ü§ñ\n\n"
            f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üí¨ –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: {total_interactions}\n"
            f"üïí –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∑–∞ 24 —á–∞—Å–∞: {interactions_last_24h}\n\n"
            "üèÜ –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        )
        
        for i, (user_id, username, count) in enumerate(top_users, 1):
            stats_text += f"{i}. {username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {user_id}): {count} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π\n"
        
        await update.message.reply_text(stats_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
    
    finally:
        if 'conn' in locals():
            conn.close()

    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ query.answer())
    # ...
async def handle_admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.
    """
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")
        return
    
    data = query.data
    
    if data == 'admin_stats':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
            cursor.execute('''
                SELECT 
                    date(timestamp) as interaction_date, 
                    COUNT(*) as daily_interactions 
                FROM interactions 
                GROUP BY interaction_date 
                ORDER BY interaction_date DESC 
                LIMIT 7
            ''')
            daily_stats = cursor.fetchall()
            
            stats_text = "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∑–∞ 7 –¥–Ω–µ–π:\n\n"
            for date, count in daily_stats:
                stats_text += f"üìÖ {date}: {count} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π\n"
            
            await query.edit_message_text(stats_text)
        
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        
        finally:
            if 'conn' in locals():
                conn.close()
    
    elif data == 'admin_users':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT DISTINCT user_id, username, MAX(timestamp) as last_interaction 
                FROM interactions 
                GROUP BY user_id, username 
                ORDER BY last_interaction DESC 
                LIMIT 10
            ''')
            recent_users = cursor.fetchall()
            
            users_text = "üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
            for user_id, username, last_interaction in recent_users:
                users_text += f"üë§ {username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: {user_id})\n"
                users_text += f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: {last_interaction}\n\n"
            
            await query.edit_message_text(users_text)
        
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        
        finally:
            if 'conn' in locals():
                conn.close()
    
    elif data == 'admin_logs':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏
        log_content = ""
        try:
            with open('bot.log', 'r') as log_file:
                # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
                log_content = ''.join(log_file.readlines()[-20:])
        except Exception as e:
            log_content = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {str(e)}"
        
        await query.edit_message_text(f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏:\n\n{log_content}")
    
    elif data == 'admin_settings':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        settings_text = (
            "üõ† <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>:\n\n"
            f"ü§ñ –ú–æ–¥–µ–ª—å: {MODEL}\n"
            f"üìù –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {FORMATTING_MODE}\n"
            f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ API-–∑–∞–ø—Ä–æ—Å–æ–≤: {API_SEMAPHORE._value}\n"
            "üì° –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω"
        )
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data='change_model'),
                InlineKeyboardButton("üìù –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data='change_formatting')
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_admin_panel')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(settings_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
    async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
     await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!")
     


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        level=logging.DEBUG,  # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger(__name__)

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("task", task_command))
    application.add_handler(CommandHandler("setadmin", command_setadmin))
    application.add_handler(CommandHandler("feedback", feedback_command))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(CommandHandler("admin", admin_panel_command))
    application.add_handler(CallbackQueryHandler(button_callback, pattern='^(new_task|task_completed)$'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async def debug_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {update.effective_user.id}: {update.message.text}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        if context.user_data.get('awaiting_feedback', False):
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")
            await handle_feedback(update, context)
        else:
            logger.debug("–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–¥–∞–µ–º –≤ handle_message")
            await handle_message(update, context)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, debug_message_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(handle_button))
    application.add_handler(CallbackQueryHandler(handle_admin_buttons, pattern="^admin_"))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        application.run_polling(drop_pending_updates=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()